name: Zulip CI

on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  bionic:
    name: Ubuntu 18.04 Bionic (Python 3.6, backend + frontend)
    runs-on: ubuntu-latest

    # This docker image was created by a generated Dockerfile at:
    #   tools/github_actions/images/bionic/Dockerfile
    container: mepriyank/actions:bionic
    env:
      # GitHub Actions sets HOME to /github/home which causes
      # problem later in provison and frontend test that runs
      # tools/setup/postgrest-init-dev-db because of .pgpass.
      # psql expects .pgpass to be at /home/github/.pgpass and
      # setting home to `/home/github` ensures it written there.
      HOME: /home/github/

    steps:
    - name: Print job name
      run: echo ${{ github.job }} 
    # Upgrade git before using checkout actions because it downloads
    # the code using Rest API if git version is less than v2.18,
    # which will cause errors in tests and provision.
    - name: Upgrade git for bionic
      run: |
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository ppa:git-core/ppa -y
        sudo apt-get update
        sudo apt-get install -y git

    - name: Add required permissions
      run: |
        # This directory is owned by root so we need
        # to do this before we can use the checkout
        # actions to get repository.
        sudo chown -R github .

        # This is the cache directory the current
        # zulip user must be able to access for the
        # cache action to work.
        sudo chmod -R 0777 /__w/_temp/

    - uses: actions/checkout@v2

    - name: Create cache directories
      shell: bash
      run: |
        dirs=(/srv/zulip-{npm,venv,emoji}-cache)
        sudo mkdir -p "${dirs[@]}"
        sudo chown -R github "${dirs[@]}"

    - name: Restore node_modules cache
      uses: actions/cache@v2
      with:
       path: /srv/zulip-npm-cache
       key: v1-yarn-deps-{{ hashFiles("package.json") }}-{{ hashFiles("yarn.lock"); }}
       restore-keys: v1-yarn-deps-

    - name: Restore python cache
      uses: actions/cache@v2
      with:
        path: /srv/zulip-venv-cache
        key: v1-venv-{{ hashFiles("requirements/thumbor-dev.txt") }}-{{ hashFiles("requirements/dev.txt") }}
        restore-keys: v1-venv-

    - name: Restore emoji cache
      uses: actions/cache@v2
      with:
        path: /srv/zulip-emoji-cache
        key: v1-emoji-{{ hashFiles("requirements/thumbor-dev.txt") }}-{{ hashFiles("requirements/dev.txt") }}
        restore-keys: v1-emoji-

    - name: Do Bionic hack
      run: |
        # Temporary hack till `sudo service redis-server start` gets fixes in Bionic. See
        # https://chat.zulip.org/#narrow/stream/3-backend/topic/Ubuntu.20bionic.20CircleCI
        sudo sed -i '/^bind/s/bind.*/bind 0.0.0.0/' /etc/redis/redis.conf

    - name: Install dependencies
      run: |
        sudo apt-get update

        # Install moreutils so we can use `ts` and `mispipe` in the following.
        sudo apt-get install -y moreutils

        # This is the main setup job for the test suite
        mispipe "tools/ci/setup-backend --skip-dev-db-build" ts

        # Cleaning caches is mostly unnecessary in Circle, because
        # most builds don't get to write to the cache.
        # mispipe "scripts/lib/clean-unused-caches --verbose --threshold 0 2>&1" ts

    - name: Run backend tests
      run: |
        . /srv/zulip-py3-venv/bin/activate && \
        mispipe "./tools/ci/backend 2>&1" ts

    - name: Run frontend tests
      run: |
        . /srv/zulip-py3-venv/bin/activate
        mispipe "./tools/ci/frontend 2>&1" ts

    - name: Test locked requirements
      run: |
        . /srv/zulip-py3-venv/bin/activate && \
        mispipe "./tools/test-locked-requirements 2>&1" ts

    - name: Upload coverage reports
      run: |
        # Codcov requires `.coverage` file to be stored in the
        # current working directory.
        mv ./var/.coverage ./.coverage
        . /srv/zulip-py3-venv/bin/activate || true

        # TODO: Check that the next release of codecov doesn't
        # throw find error.
        # codecov==2.0.16 introduced a bug which uses "find"
        # for locating files which is buggy on some platforms.
        # It was fixed via https://github.com/codecov/codecov-python/pull/217
        # and should get automatically fixed here once it's released.
        # We cannot pin the version here because we need the latest version for uploading files.
        # see https://community.codecov.io/t/http-400-while-uploading-to-s3-with-python-codecov-from-travis/1428/7
        pip install codecov && codecov || echo "Error in uploading coverage reports to codecov.io."

    - name: Store puppeteer artifacts
      uses: actions/upload-artifact@v1
      with:
        name: puppeteer
        path: ./var/puppeteer

    # We cannot use upload-artifacts actions to upload
    # test reports from /tmp, they exist inside the docker
    # image. Move them to var so we access it outside docker.
    - name: Move test reports to var
      run: mv /tmp/zulip-test-event-log/ ./var/

    - name: Store test reports
      uses: actions/upload-artifact@v1
      with:
        name: test-reports
        path: ./var/zulip-test-event-log/

  focal_backend:
    name: Ubuntu 20.04 Focal (Python 3.8, backend)
    runs-on: ubuntu-latest

    # This docker image was created by a generated Dockerfile at:
    #   tools/github_actions/images/focal/Dockerfile
    container: mepriyank/actions:focal
    env:
      # GitHub Actions sets HOME to /github/home which causes
      # problem later in provison and frontend test that runs
      # tools/setup/postgrest-init-dev-db because of .pgpass.
      # psql expects .pgpass to be at /home/github/.pgpass and
      # setting home to `/home/github` ensures it written there.
      HOME: /home/github/

    steps:
    - name: Print job name
      run: echo ${{ github.job }} 

    - name: Update permission
      run: sudo chown -R github .

    - uses: actions/checkout@v2

    - name: Create cache directories
      run: |
        dirs=(/srv/zulip-{npm,venv,emoji}-cache)
        sudo mkdir -p "${dirs[@]}"
        sudo chown -R github "${dirs[@]}"

    - name: Restore node_modules cache
      uses: actions/cache@v2
      with:
        path: /srv/zulip-npm-cache
        key: v1-yarn-deps-{{ hashFiles("package.json") }}-{{ hashFiles("yarn.lock"); }}
        restore-keys: v1-yarn-deps-

    - name: Restore python cache
      uses: actions/cache@v2
      with:
        path: /srv/zulip-venv-cache
        key: v1-venv-{{ hashFiles("requirements/thumbor-dev.txt") }}-{{ hashFiles("requirements/dev.txt") }}
        restore-keys: v1-venv-

    - name: Restore emoji cache
      uses: actions/cache@v2
      with:
        path: /srv/zulip-emoji-cache
        key: v1-emoji-{{ hashFiles("requirements/thumbor-dev.txt") }}-{{ hashFiles("requirements/dev.txt") }}
        restore-keys: v1-emoji-

    - name: Install dependencies
      run: |
        sudo apt-get update

        # Install moreutils so we can use `ts` and `mispipe` in the following.
        sudo apt-get install -y moreutils

        # This is the main setup job for the test suite
        mispipe "tools/ci/setup-backend --skip-dev-db-build" ts

        # Cleaning caches is mostly unnecessary in Circle, because
        # most builds don't get to write to the cache.
        # mispipe "scripts/lib/clean-unused-caches --verbose --threshold 0 2>&1" ts

    - name: Run backend tests
      run: |
        . /srv/zulip-py3-venv/bin/activate && \
        mispipe "./tools/ci/backend 2>&1" ts

    - name: Check development database build
      run: mispipe "tools/ci/setup-backend" ts

  bionic_production_build:
    name: Bionic Production Build
    runs-on: ubuntu-latest

    # This docker image was created by a generated Dockerfile at:
    #   tools/github_actions/images/bionic/Dockerfile
    container: mepriyank/actions:bionic

    steps:
    - name: Upgrade git for bionic
      run: |
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository ppa:git-core/ppa -y
        sudo apt-get update
        sudo apt-get install -y git

    - name: Add required permissions
      run: |
        # This directory is owned by root so we need
        # to do this before we can use the checkout
        # actions to get repository.
        sudo chown -R github .

        # This is the cache directory the current
        # zulip user must be able to access for the
        # actions/cache@v2 to work.
        sudo chmod -R 0777 /__w/_temp/

    - uses: actions/checkout@v2

    - name: Create cache directories
      shell: bash
      run: |
        dirs=(/srv/zulip-{npm,venv,emoji}-cache)
        sudo mkdir -p "${dirs[@]}"
        sudo chown -R github "${dirs[@]}"

    - name: Restore node_modules cache
      uses: actions/cache@v2
      with:
       path: /srv/zulip-npm-cache
       key: v1-yarn-deps-{{ hashFiles("package.json") }}-{{ hashFiles("yarn.lock"); }}
       restore-keys: v1-yarn-deps-

    - name: Restore python cache
      uses: actions/cache@v2
      with:
        path: /srv/zulip-venv-cache
        key: v1-venv-{{ hashFiles("requirements/thumbor-dev.txt") }}-{{ hashFiles("requirements/dev.txt") }}
        restore-keys: v1-venv-

    - name: Restore emoji cache
      uses: actions/cache@v2
      with:
        path: /srv/zulip-emoji-cache
        key: v1-emoji-{{ hashFiles("requirements/thumbor-dev.txt") }}-{{ hashFiles("requirements/dev.txt") }}
        restore-keys: v1-emoji-

    - name: Do Bionic hack
      run: |
        # Temporary hack till `sudo service redis-server start` gets fixes in Bionic. See
        # https://chat.zulip.org/#narrow/stream/3-backend/topic/Ubuntu.20bionic.20CircleCI
        sudo sed -i '/^bind/s/bind.*/bind 0.0.0.0/' /etc/redis/redis.conf

    - name: Build production
      run: |
        sudo apt-get update

        # Install moreutils so we can use `ts` and `mispipe` in the following.
        sudo apt-get install -y moreutils

        mispipe "./tools/ci/production-build 2>&1" ts

    # The upload-artifact action does not allow us to specify individual
    # files to upload under single artifact but allows us to upload a
    # a directory. So create that directory with all the files we want
    # to upload.
    - name: Prepare production tarball artifact
      run: |
        mkdir ./var/production-tarball
        relevant_artifacts=(
          /tmp/zulip-server-test.tar.gz
          /tmp/success-http-headers-bionic.txt
          /tmp/success-http-headers-focal.txt
          /tmp/production-install
          /tmp/production
          /tmp/production-extract-tarball
        )

        for file in ${relevant_artifacts[@]}; do
          mv $file ./var/production-tarball/ || true
        done

    # This tarball will be used by other jobs
    # to do a production install
    - name: Upload production tarball
      uses: actions/upload-artifact@v2
      with:
        name: production-tarball
        path: ./var/production-tarball/*

  bionic_production_install:
    name: Bionic Production Install
    needs: bionic_production_build
    runs-on: ubuntu-latest

    # This docker image was created by a generated Dockerfile at:
    #   tools/github_actions/images/bionic/Dockerfile
    container: mepriyank/actions:bionic

    steps:
    - name: Retrive production tarball
      uses: actions/download-artifact@v2
      with:
        name: production-tarball
        path: /tmp

    - name: Add required permissions
      run: |
        # This directory is owned by root so we need
        # to do this before we can use the checkout
        # actions to get repository.
        sudo chown -R github .
        sudo chown github /tmp/production-extract-tarball

    - name: Create cache directories
      run: |
        dirs=(/srv/zulip-{npm,venv,emoji}-cache)
        sudo mkdir -p "${dirs[@]}"
        sudo chown -R github "${dirs[@]}"

    - name: Restore node_modules cache
      uses: actions/cache@v2
      with:
       path: /srv/zulip-npm-cache
       key: v1-yarn-deps-{{ hashFiles("package.json") }}-{{ hashFiles("yarn.lock"); }}
       restore-keys: v1-yarn-deps-

    - name: Do Bionic hack
      run: |
        # Temporary hack till `sudo service redis-server start` gets fixes in Bionic. See
        # https://chat.zulip.org/#narrow/stream/3-backend/topic/Ubuntu.20bionic.20CircleCI
        sudo sed -i '/^bind/s/bind.*/bind 0.0.0.0/' /etc/redis/redis.conf

    - name: Extract production tarball
      run: |
        sudo apt-get update

        # Install moreutils so we can use `ts` and `mispipe` in the following.
        sudo apt-get install -y moreutils

        # sudo chown github /tmp/production-extract-tarball
        mispipe "/tmp/production-extract-tarball 2>&1" ts

